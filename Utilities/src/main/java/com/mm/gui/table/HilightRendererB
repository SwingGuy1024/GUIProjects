package com.mm.gui.table;

import java.awt.Color;
import java.awt.Component;
import java.awt.Rectangle;
import java.awt.Insets;
import java.text.MessageFormat;
import java.util.List;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.AbstractTableModel;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.Icon;
import javax.swing.JComponent;
import javax.swing.text.Document;
import javax.swing.text.BadLocationException;
import javax.swing.event.DocumentListener;
import javax.swing.event.DocumentEvent;

import com.sun.java.swing.SwingUtilities2;

/**
 + HR-C
 * Notes:
 * 1) The text to place the "..." in (findTextWidth()) is modeled after
 * SwingUtilites.layoutCompoundLabel(), although it's more efficient because
 * it doesn't do any more than clip the text. Notes 2 & 3 pertain to this
 * text clipping.
 *
 * 2) This assumes the text does not have a horizontal position of CENTER, or
 * that there is no icon. This may be easily added if needed. Icons work fine
 * for text positioned at LEFT or RIGHT or LEADING or TRAILING.
 *
 * 3) This does not support text when the "Left Side Bearing" is negative.
 * This is because I have no idea what Left Side Bearing means, and so I can't
 * test for this case, although I wonder if it has something to do with
 * right-to-left text. In any case, this is easily corrected with a proper
 * test case. see SwingUtilities2.getLeftSideBearing().
 *
 * 4) This class fails if the text is rendered using HTML. This method assumes
 * the text doesn't use HTML, and so uses HTML to highlight the text. When the
 * original text uses HTML, this detects that case and makes no attempt to
 * hilight the text.
 *
 * 5) Since HTML text doesn't support clipping (putting in a "..." when the
 * cell can't show the whole thing), this clips the text on its own before
 * adding the HTML markup. It should clip at exactly the same point as the
 * default renderer. Failure to do so should be seen as a bug. As far as I can
 * tell, it's working properly.
 *
 * 6) This renderer may be linked to a JTextField. In this case, it will
 * hilight whatever is in that field. Changes to the JTextField will
 * automatically get reflected in the renderer. This process requires the
 * TableModel to extend AbstractTableModel, since it calls the
 * fireTableRowsUpdated() method.
 *
 * 7) Hilighting the found text does not use a search algorithm. Since it's
 * all done when rendering, the code has no knowledge of previous or next
 * matches. This may be added if needed, although it would carry a performance
 * penalty proportional to the sorting time of the list of rows.
 *
 * 8) Although this uses HTML to render the text, it could also use a JTextPane
 * and render the text through the JTextPane's styles. A previous attempt to do
 * this didn't work, but that was probably because I wasn't measuring the
 * text correctly yet. If that's the case, I can convert this to use a
 * JTextPane, and I won't have any problems rendering HTML any more. <br>
 * The JTextPane attempts to wrap the text that doesn't fit, which is why it
 * failed. My efforts to write a non-wrapping version didn't work, but now
 * I measure the text correclty, so I can probably prevent text wrapping by
 * clipping the text at the right point, which already works.
 *
 * 9) There's one bug that I haven't figured out how to deal with: When the
 * needle can be found inside the code that has been substituted for < or &,
 * it gets hilighted. It shouldn't. I need to not look inside the substitutions.
 * I'm not sure the best way to deal with this. I could first examine the needle
 * to see if it can be found in either substitution, and only handle it in the
 * case where is. In those cases, I could break up the haystack into discreet
 * search blocks. If I do this only for "sensitive" needles, I don't think I
 * need to worry about the case where the needle crosses over a substitution
 * code. But if I ALWAYS break the search up into blocks, I need to worry about
 * crossover. That is, if the needle is "a&p", then the haystack will change
 * a&p to a&amp;p, in which case I won't find it. (Or maybe I will, since I
 * also change the needle. <br>
 * Here's another possible solution. I could keep track of the spans of all
 * substitution codes. Then, when I find a potential match, I could make sure
 * that an end point isn't inside a substitution code. That might be simpler.
 *
 * Created using IntelliJ IDEA. Date: Mar 8, 2005 Time: 12:22:02 AM
 *
 * @author Miguel Mu\u00f1oz
 *         <p/>
 *         Copyright (c) 2004 Miguel Munoz
 */

/**
 * Renderer to hilight text.
 * <b>Note:</b> Hilighted text should never be used with text that is already
 * rendered in html.
 * <p/>
 * todo: Add code to count how many times the text appears in the table, and to
 * todo  create a "findNext()" method.
 */
public class HilightRenderer extends DefaultTableCellRenderer {
	private String mTxt = null;
	private boolean mAllowHtml=false;
	private static StringBuilder mStorage = new StringBuilder();
	private static EncodedSearcher mAmp = new EncodedSearcher("&", "&amp;");
	private static EncodedSearcher mLess = new EncodedSearcher("<", "&lt;");

	/**
	 * Create a HilightRenderer. This leaves the hilight color undefined.
	 *
	 */
	public HilightRenderer() {
		super();
	}

	/**
	 * Create a HilightRenderer with the specified color as the background color
	 * of the hilighted text.
	 *
	 * @param pBgColor The background color of the hilighted text.
	 */
	public HilightRenderer(Color pBgColor) {
		this();
		setHiliteColor(pBgColor);
	}

	/**
	 * Create a HilightRenderer with the specified colors as the text and
	 * background colors of the
	 * hilighted text.
	 *
	 * @param pTextColor The foreground color of the hilighted text.
	 * @param pBgColor   The background color of the hilighted text.
	 */
	public HilightRenderer(Color pTextColor, Color pBgColor) {
		this();
		setHiliteColor(pTextColor, pBgColor);
	}

	/**
	 * Create a HilightRenderer which takes the hilight color from the specified
	 * table. This sets the background color of the hilighted text to the color
	 * that is midway between the table's selection color and the tables's
	 * background color. This way, the hilighted text shows up well in both
	 * selected and unselected cells, and the hilight color doesn't clash with
	 * the selection color.
	 *
	 * @param pTbl    The JTable from which the hilight background color is
	 *                determined.
	 * @see #setHiliteColor(javax.swing.JTable)
	 */
	public HilightRenderer(JTable pTbl) {
		this();
		setHiliteColor(pTbl);
	}

	/**
	 * Specifies the text to highlight.
	 * @param pTxt  The text to hilight.
	 */
	public void setHilightText(String pTxt) {
		mTxt = pTxt;
	}

	/**
	 * Sets the hilight color, taking it from the specified table. This sets the
	 * background color of the hilighted text to midway between the table's
	 * selection color and the tables's background color. This way, the hilighted
	 * text shows up well whether or not the cell is selected, and the hilight
	 * color presumably doesn't clash with the selection color. (If the table has
	 * a colored background, it still may clash.)
	 *
	 * @param tbl  The JTable from which the hilight background color is
	 *             determined.
	 */
	public void setHiliteColor(JTable tbl) {
		Color b = tbl.getBackground();
		Color sb = tbl.getSelectionBackground();

		Color hiliteClr = new Color((b.getRed() + sb.getRed()) / 2,
		        (b.getGreen() + sb.getGreen()) / 2,
		        (b.getBlue() + sb.getBlue()) / 2,
		        (b.getAlpha() + sb.getAlpha()) / 2);
		setHiliteColor(hiliteClr);
	}

	public void setHiliteColor(Color pClr) {
		mHlite = MessageFormat.format(mHliteBase1, colorCode(pClr));
	}

	public void setHiliteColor(Color pBgClr, Color pFgClr) {
		mHlite = MessageFormat.format(mHliteBase2, colorCode(pBgClr), colorCode(pFgClr));
	}

	private String colorCode(Color pHiliteClr) {
		return Integer.toHexString(pHiliteClr.getRGB() & 0x00ffffff);
	}

	private String mHliteBase1 = "<font style=\"background-color:{0}\">";
	private String mHliteBase2 = "<font style=\"background-color:{0};color:{1};\">";
	private String mHlite=null;
	private String mHlEnd = "</font>";

	public boolean getAllowHTML() { return mAllowHtml; }
	public void    setAllowHTML(boolean pAllowHTML) { mAllowHtml = pAllowHTML; }

	/**
	 * Returns the default table cell renderer.
	 *
	 * @param pTable     the <code>JTable</code>
	 * @param value      the value to assign to the cell at <code>[row,
	 *                   column]</code>
	 * @param isSelected true if cell is selected
	 * @param hasFocus   true if cell has focus
	 * @param row        the row of the cell to render
	 * @param column     the column of the cell to render
	 * @return the default table cell renderer
	 */
	public Component getTableCellRendererComponent(JTable pTable,
	                                               Object value,
	                                               boolean isSelected,
	                                               boolean hasFocus,
	                                               int row,
	                                               int column) {
		assert mHlite != null : "Undefined highlight color";
		if (value == null)
			value = "";
		Component cmp = super.getTableCellRendererComponent(pTable, value, isSelected, hasFocus, row, column);
		// We delegate the work to a static public method, so we can call
		// this from any renderer.
		// (First we delegate to a local method, so we can use the html codes)
		if (row%2==0)
			setText(renderHigh(this, pTable.getCellRect(row, column, false), mTxt, mHlite, mHlEnd, mAllowHtml));
		return cmp;
	}

	public static String renderHigh(DefaultTableCellRenderer pRndr,
		                                Rectangle pCellRect,
		                                String pNeedle,
		                                String pTabBegin,
		                                String pTabEnd,
		                                boolean pAllowHTML) {
		String pHaystack = pRndr.getText();
		String origHaystack = pHaystack;
		String lowTxt = pHaystack.toLowerCase();
		// Cant highlight if it's already HTML
		if (lowTxt.startsWith("<html>"))
			return pHaystack;
		// if there's nothing to hilite:
		if (pNeedle == null)
			return pHaystack;
		if (pNeedle.length() == 0)
			return pHaystack;

		String haystack = lowTxt;
		int availWidth = findTextWidth(pHaystack, pRndr, pCellRect, pRndr.getIcon(), pRndr.getIconTextGap());
		int txtWid = SwingUtilities2.stringWidth(pRndr, pRndr.getFontMetrics(pRndr.getFont()), pHaystack);
		boolean clipped = availWidth < txtWid;
		if (clipped)
			haystack = SwingUtilities2.clipString(pRndr, pRndr.getFontMetrics(pRndr.getFont()), pHaystack, availWidth);

		// haystack now has ... at the end if it needed to get clipped.

		if (pAllowHTML) {
			pHaystack = massage(pHaystack);
			lowTxt    = massage(lowTxt);
			pNeedle   = massage(pNeedle);
			haystack  = massage(haystack);
		}

		int haystackLen = haystack.length();
		if (clipped)
			haystackLen -= 3; // 3 is for the dot-dot-dot

		List<Integer> matches = new ArrayList<Integer>();
		// do all searches in lower case:
		String lowNeedle = pNeedle.toLowerCase();
		int mark = lowTxt.indexOf(lowNeedle);
		// If there's nothing to find...
		if (mark < 0)
			return origHaystack;

		// Beyond this point, there is almost definitely some text to hilight.
		// (I say "almost" because the text might end inside a substitution code.)
		int srchSize = pNeedle.length();
		while (mark >= 0 && mark < haystackLen) {
			if (!pAllowHTML || (isMarkValid(mark, mAmp, mLess) && isMarkValid(mark+srchSize, mAmp, mLess)))
			{
				matches.add(new Integer(mark));
			}
			mark = lowTxt.indexOf(lowNeedle, mark + srchSize);
		}
		if (matches.size() == 0)
			return origHaystack;
		boolean clipTail = mark >= 0; // hilite the ... if there's more text beyond.

		// For efficiency, I make sure we allocate more than enough space.

		int hilightPadding = pTabBegin.length() + pTabEnd.length();
		int maxLen = pHaystack.length() + hilightPadding*matches.size() + 16 + hilightPadding;
		StringBuilder bldr = new StringBuilder(maxLen);

		bldr.append("<html>");
		Iterator<Integer> itr = matches.iterator();
		int lastMark = 0;
		mark = -srchSize;
		while (itr.hasNext()) {
			mark = itr.next();
			bldr.append(pHaystack.substring(lastMark, mark));
			bldr.append(pTabBegin);
			int end = Math.min(mark + srchSize, haystackLen);
			bldr.append(pHaystack.substring(mark, end));
			bldr.append(pTabEnd);
			lastMark = mark + srchSize;
		}
		if (clipped) {
			if (mark + srchSize < haystackLen)
				bldr.append(pHaystack.substring(mark + srchSize, haystackLen)); // Test this line
			bldr.append("...");
			if (clipTail) {
				int tailStart = bldr.length() - 3;
				bldr.insert(tailStart, pTabBegin);
				bldr.append(pTabEnd);
			}
		} else
			bldr.append(pHaystack.substring(mark + srchSize, haystackLen));
		bldr.append("</html>");
		return bldr.toString();
	}

//	private static boolean isMarkValid(int mark, EncodedSearcher... enc)
//	{
//		return EncodedSearcher.isMarkValid(mark, enc);
//	}
//
//	private static boolean isMarkValid(int mark, int[] ltLocs, int lt, int[] ampLocs, int amp)
//	{
//		if (!isMarkValid(mark, ltLocs, lt))
//			return false;
//		return isMarkValid(mark, ampLocs, amp);
//	}
//
//	private static boolean isMarkValid(int mark, int[] locs, int len)
//	{
//		for (int ii=0; ii<len; ++ii)
//		{
//			if (mark)
//		}
//	}

//	private static String wrapHtml(StringBuilder txt) {
//		txt.insert(0, "<html>");
//		txt.append("</html>");
//		return txt.toString();
//	}
//
	public void listenToField(JTextField pFld, final AbstractTableModel pMdl) {
		DocumentListener lsnr = new DocumentListener() {
			public void insertUpdate(DocumentEvent e) { doHilite(e); }
			public void removeUpdate(DocumentEvent e) { doHilite(e); }
			public void changedUpdate(DocumentEvent e) { doHilite(e); }

			private void doHilite(DocumentEvent evt) {
				Document document = evt.getDocument();
				try {
					setHilightText(document.getText(0, document.getLength()));
					pMdl.fireTableRowsUpdated(0, pMdl.getRowCount() - 1);
				} catch (BadLocationException e) {
					e.printStackTrace(); // Shouldn't happen
				}
			}

		};
		pFld.getDocument().addDocumentListener(lsnr);
	}

	// For efficiency, we only allocate this once, and reuse it.
	private static Insets sPermInsets = new Insets(0, 0, 0, 0);

	/**
	 * Finds the horizontal distance available to display the component's text.
	 * Adapted from SwingUtilities.layoutCompoundLabel
	 *
	 * @param pTxt         The text toRender
	 * @param pVRect       The component or table cell rectangle
	 * @param pIcn         The icon, or null
	 * @param pTextIconGap The gap between the icon and the text.
	 * @return The width, in pixels, of the display space for the text. This will
	 *         be close to the width of the component, and may be smaller then the
	 *         text needs.
	 */
	public static int findTextWidth(String pTxt, JComponent pCmp, Rectangle pVRect, Icon pIcn, int pTextIconGap) {
		int gap = 0;
		int iconWidth = 0;
		if (pTxt == null)
			return -1;
		if (pTxt.length() == 0)
			return -1;
		if (pIcn != null) {
			iconWidth = pIcn.getIconWidth();
			gap = pTextIconGap;
		}
		Insets ins = pCmp.getInsets(sPermInsets);
		// I'm assuming here that the label's horizontal text positon is NOT center.
		int availWidth = pVRect.width - (iconWidth + gap);
		availWidth -= (ins.left + ins.right);
		return availWidth;
	}

	/**
	 * This replaces all characters that could be confused with HTML code with
	 * their html equivalent. We do this in both the needle and the haystack.
	 * As of this writing, the only replacment we need is the less-than character.
	 * If we need to do more, we should put them all here.
	 * @param input  The text to massage.
	 * @return       null if no changes were made, the replaced string otherwise.
	 */
	public static String massage(String input)
	{
		input = mAmp.massage(input);
		input = mLess.massage(input, mAmp);
		return input;
	}

	private static Pattern sAmp = Pattern.compile("&", Pattern.LITERAL);
	private static Pattern sLt  = Pattern.compile("<", Pattern.LITERAL);
	public static final String lessThanReplacement = Matcher.quoteReplacement("&lt;");
	public static final String ampersandReplacement = Matcher.quoteReplacement("&amp;");
	static { System.err.println("LT:  " + lessThanReplacement + "\namp: " + ampersandReplacement); }

	/**
	 * This class is written to find a scrap of text inside a larger block, after
	 * the text has had special characters replaced by their HTML equivalent.
	 * Created by IntelliJ IDEA.
	 * User: mmunoz
	 * Date: Sep 20, 2005
	 * Time: 12:33:18 PM
	 */
	public static class EncodedSearcher {
		private final String mText;
		private final String  mReplacement;
		private List<Integer> mMatchLocs=null;
		private int mDelta;

		public EncodedSearcher(String pNeedle, String pReplacement) {
			mText = pNeedle;
			mReplacement = pReplacement;
			mDelta = pReplacement.length() - pNeedle.length();
		}

		public String massage(String input, EncodedSearcher... previous)
		{
			int where = 0;
			int rLen = mText.length();
			int repLen = mReplacement.length();
			mMatchLocs = new ArrayList<Integer>();
			StringBuilder buf = new StringBuilder(input);
			while ((where=buf.indexOf(mText, where)) >= 0)
			{
				buf.replace(where, where+rLen, mReplacement);
				mMatchLocs.add(where);
				where += repLen;

				for (EncodedSearcher prev : previous)
				{
					for (int ii=0; ii<prev.mMatchLocs.size(); ++ii)
					{
						int loc = prev.mMatchLocs.get(ii);
						if (loc>where)
							prev.mMatchLocs.set(ii, loc+mDelta);
					}
				}
			}
			return buf.toString();
		}

		public boolean isMarkValid(int mark)
		{
			int markEnd = mark - mReplacement.length();
			for (int blockStart : mMatchLocs)
			{
				if (mark > blockStart && markEnd < blockStart)
					return false;
			}
			return true;
		}

//		public static void main(String[] args) {
//			EncodedSearcher ampEnc = new EncodedSearcher("&", "&amp;");
//			EncodedSearcher ltEnc = new EncodedSearcher("<", "&lt;");
//			String out = test(ampEnc, "Miguel Mu&ntilde;oz <font> data </font> & moreData");
//			test(ltEnc, out, ampEnc);
//			System.out.println("\n-----------------\n");
//			out=test(ampEnc, "Miguel Mu&&ntilde;oz <font> data <</font> &moreData");
//			test(ltEnc, out, ampEnc);
//		}
//
//		public static String test(EncodedSearcher es, String input, EncodedSearcher... prev)
//		{
////		EncodedSearcher es = new EncodedSearcher(needle, replacement);
//			String out = es.massage(input, prev);
//			System.out.println("\n[" + input + "]");
//			System.out.println("[" + out + "]");
//			System.out.print(" ");
//			for (int ch=0; ch<out.length(); ++ch)
//			{
//				if (isMarkValid(ch, es, prev))
//					System.out.print("x");
//				else
//					System.out.print(".");
//			}
//			System.out.println("");
//			showLocs(es);
//			for (EncodedSearcher pr : prev)
//				showLocs(pr);
//			return out;
//		}
//
	}
	public static boolean isMarkValid(int ch, EncodedSearcher... prev)
	{
		for (EncodedSearcher pr : prev)
			if (!pr.isMarkValid(ch))
				return false;
		return true;
	}

	private static void showLocs(EncodedSearcher es)
	{
		for (int ii : es.mMatchLocs)
		{
			System.out.print(" " + ii);
		}
		System.out.println("");
	}
}

